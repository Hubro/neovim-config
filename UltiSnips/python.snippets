snippet LOG "Create a LOG constant" b
LOG = logging.getLogger(${0:__name__})
endsnippet

snippet contextmanager "A basic contextmanager" b
@contextmanager
def ${1:name}($2) -> Iterator[$3]:
	yield$0
endsnippet

snippet asynccontextmanager "An async contextmanager" b
@asynccontextmanager
async def ${1:name}($2) -> AsyncGenerator[${3:None}, None]:
	yield$0
endsnippet

snippet ifmain
if __name__ == "__main__":
	${0:main()}
endsnippet

snippet aifmain
if __name__ == "__main__":
	${0:asyncio.run(main())}
endsnippet

snippet def
def ${1:function_name}($2) -> None:
	${0:pass}
endsnippet

snippet adef
async def ${1:function_name}($2) -> None:
	${0:pass}
endsnippet

snippet init
def __init__(self$1) -> None:
	${0:pass}
endsnippet

snippet __aenter__ "__aenter__" b
async def __aenter__(self):
	return self
endsnippet

snippet __aexit__ "__aexit__" b
async def __aexit__(
	self,
	exc_type: type[BaseException] | None,
	exc: BaseException | None,
	traceback: TracebackType | None,
):
	del exc_type, exc, traceback
endsnippet

snippet pprint
from pprint import pprint; pprint($1)
endsnippet

snippet debug "Inserts a debug statement from devtools" b
from devtools.debug import debug; debug($0)
endsnippet

snippet ipython "Drop into an interactive IPython session"
import IPython; IPython.embed()
endsnippet

snippet annotations "" b
from __future__ import annotations
endsnippet
